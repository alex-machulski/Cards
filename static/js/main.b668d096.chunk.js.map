{"version":3,"sources":["n1-main/m1-ui/Main/Main.module.css","n2-features/f1-auth/a2-register/Register.module.css","n2-features/f2-error404/Error404.module.css","components/super-components/s1-SuperInputText/SuperInputText.module.css","components/super-components/s2-SuperButton/SuperButton.module.css","components/super-components/s3-SuperCheckbox/SuperCheckbox.module.css","components/super-components/s4-SuperEditableSpan/SuperEditableSpan.module.css","api/api.ts","state/login-reducer.ts","state/register-reducer.ts","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f3-profile/Profile.tsx","n2-features/f2-error404/Error404.tsx","n2-features/f4-password/RestorePassword.tsx","n2-features/f4-password/EnterPassword.tsx","n1-main/m1-ui/Main/Main.tsx","components/super-components/s1-SuperInputText/SuperInputText.tsx","components/super-components/s2-SuperButton/SuperButton.tsx","components/super-components/s3-SuperCheckbox/SuperCheckbox.tsx","components/super-components/s4-SuperEditableSpan/SuperEditableSpan.tsx","components/super-components/s5-SuperSelect/SuperSelect.tsx","components/super-components/s6-SuperRadio/SuperRadio.tsx","n2-features/f0-test/TestPage.tsx","App.tsx","reportWebVitals.ts","state/profile-reducer.ts","state/recover-reducer.ts","state/app-reducer.ts","state/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","authAPI","post","email","password","rememberMe","delete","SET_USER_DATA","initialState","isLoggedIn","_id","name","avatar","publicCardPacksCount","error","setAuthUserData","type","payload","getAuthUserData","dispatch","then","response","status","data","SET_REGISTER_SUCCESS","CLEAR_REGISTER_STATUS","SET_REGISTER_ERROR","isRegistrationSuccess","registerError","registrationAC","setRegisterErrorAC","Login","useSelector","state","login","useDispatch","useEffect","to","PROFILE_PATH","initialValues","onSubmit","values","setSubmitting","console","log","htmlFor","id","placeholder","Register","isRegisterSuccess","register","formik","useFormik","repeatPassword","validate","errors","test","length","res","catch","err","LOGIN_PATH","className","s","registerBlock","handleSubmit","inputElement","getFieldProps","onFocus","touched","style","color","Profile","loginState","useState","isLogged","setIsLogged","onClick","src","alt","Error404","errorBlock","number","message","cat","RestorePassword","EnterPassword","Main","styles","navBlock","REGISTER_PATH","RESTORE_PASS_PATH","ENTER_PASS_PATH","TEST_PAGE_PATH","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperEditableSpan","autoFocus","onBlur","spanProps","editMode","setEditMode","onDoubleClick","restSpanProps","editableSpan","width","SuperSelect","options","onChangeOption","mappedOptions","map","opt","i","SuperRadio","onChangeCallback","o","TestPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","app","action","recover","profile","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b668d096.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBlock\":\"Main_navBlock__1BCuH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"Register_registerBlock__l65On\",\"inputElement\":\"Register_inputElement__3eS7w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorBlock\":\"Error404_errorBlock__31wTr\",\"number\":\"Error404_number__10AAh\",\"message\":\"Error404_message__3jV4D\",\"cat\":\"Error404_cat__vAScU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3p6xM\",\"errorInput\":\"SuperInputText_errorInput__8MYYn\",\"error\":\"SuperInputText_error__7wOv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Zqa-\",\"red\":\"SuperButton_red__1dYOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__31-MZ\",\"spanClassName\":\"SuperCheckbox_spanClassName__3J3Yc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editableSpan\":\"SuperEditableSpan_editableSpan__3s46N\"};","import axios from \"axios\";\r\n\r\n// экземпляр axios , в котором указываются общие свойства\r\nconst instance = axios.create({\r\n    withCredentials: true, // разрешить запрос на другие серверы\r\n    // путь на локальный сервер\r\n    baseURL: `http://localhost:7542/2.0/`,\r\n    // на удаленный сервер хероку\r\n    // baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    headers: {}\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    // проверка на залогиненность\r\n    me() {\r\n        return instance.post<MeResponseType>(`/auth/me`, {})\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<LoginResponseType>(`/auth/login`, {email, password, rememberMe})\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete<LogoutResponseType>(`/auth/me`, {})\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>('auth/register', {email: email, password: password});\r\n    }\r\n}\r\n\r\n//types\r\nexport type MeResponseType = {\r\n    token: string\r\n    tokenDeathTime: number\r\n    __v: number\r\n    _id: string; // айдишник пользователя\r\n    email: string; //мыло пользователя ()\r\n    name: string; // имя поьлзователя\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date; // дата создания пользователя\r\n    updated: Date; // дата обновления пользователя\r\n    isAdmin: boolean; // не работает\r\n    verified: boolean; // подтвердил ли почту ( если восстанавливал пароль, то тру)\r\n    rememberMe: boolean; // запоминать ли пользователя\r\n    avatar?: string; // ссылка на аватар пользователя\r\n    error?: string;\r\n}\r\n\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\ntype LogoutResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    error?: string\r\n}","\r\nimport {ThunkType} from \"./store\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nexport const SET_USER_DATA = \"SET-USER-DATA\"\r\n\r\n\r\nexport type InitialStateLoginType = {\r\n    _id: string | null                  // айдишник пользователя\r\n    email: string | null                //мыло пользователя\r\n    name: string | null                 // имя поьлзователяв\r\n    publicCardPacksCount: number;       // количество колод\r\n    rememberMe: boolean                 // запоминать ли пользователя\r\n    isLoggedIn: boolean                 // вошел ли пользователь\r\n    error?: string | null\r\n    avatar?: string            // ссылка на аватар пользователя\r\n\r\n}\r\n//  не делал динамическую типизацию стэйта, чтобы была возможность поставить везде null\r\nconst initialState: InitialStateLoginType = {\r\n    isLoggedIn: false,\r\n    _id: null,\r\n    email: null,\r\n    name: null,\r\n    avatar: \"\",\r\n    publicCardPacksCount: 0,\r\n    rememberMe: false,\r\n    error: null\r\n}\r\nexport const loginReducer = (state: InitialStateLoginType = initialState, action: LoginReducerActionsType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (\r\n    _id: string | null,\r\n    email: string | null,\r\n    name: string | null,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    isLoggedIn: boolean,\r\n    avatar?: string,\r\n    error?: string | null,\r\n) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {isLoggedIn, _id, email, name, avatar, publicCardPacksCount, rememberMe,error}\r\n} as const)\r\n\r\n\r\n// ThunkCreator  - запрашивет на сервер, залолгинены ли мы. Если да, то меняет через диспатч стэйт\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return (dispatch) => {\r\n        // console.log(\"санка -me-начало\")\r\n        // return\r\n        authAPI.me()\r\n            .then(response => {\r\n                if (response.status === 200) { // проверка на то, что ответ пришел правильно\r\n                    let {\r\n                        _id, email, name, publicCardPacksCount, rememberMe, avatar,\r\n                        error\r\n                    } = response.data// деструктуризация приходящих данных\r\n                    dispatch(setAuthUserData(_id, email, name, publicCardPacksCount, rememberMe, true,\r\n                        avatar,error))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// ThunkCreator  - отправляет  на сервер логин\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n    return (dispatch) => {\r\n        authAPI.login(email, password, rememberMe)\r\n            .then(response => {\r\n                if (response.status === 200) { // проверка на то, что ответ пришел правильно\r\n                    dispatch(getAuthUserData())\r\n                } else {\r\n                    console.log(response)\r\n                    ;\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// ThunkCreator  - отправляет  на сервер запрос на удаление  логина - yf cfvjv\r\nexport const logout = (): ThunkType => {\r\n    return (dispatch) => {\r\n        authAPI.logout()\r\n            .then(response => {\r\n                    if (response.status === 200) {\r\n                        dispatch( setAuthUserData(null, null, null, 0,\r\n                            false, false, \"\", null))\r\n                    }\r\n                }\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport type SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport type LoginReducerActionsType = SetAuthUserDataActionType","import {Dispatch} from \"redux\";\r\nimport {ActionsType} from \"./store\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nconst SET_REGISTER_SUCCESS = \"register/SET_REGISTER_SUCCESS\";\r\nconst CLEAR_REGISTER_STATUS = \"register/CLEAR_REGISTER_STATUS\";\r\nconst SET_REGISTER_ERROR = \"register/SET_REGISTER_ERROR\";\r\n\r\nconst initialState = {\r\n    isRegistrationSuccess: false,\r\n    registerError: null as null | string\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: RegisterReducerActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_REGISTER_SUCCESS:\r\n            return {...state, isRegistrationSuccess: true}\r\n        case CLEAR_REGISTER_STATUS:\r\n            return {...state, isRegistrationSuccess: false}\r\n        case SET_REGISTER_ERROR:\r\n            return {...state, registerError: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const registerTC = (email: string, password: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.register(email, password)\r\n        .then(res => {\r\n            if (!res.data.error) {\r\n                dispatch(registrationAC());\r\n            }\r\n        })\r\n        .catch(err => {\r\n            dispatch(setRegisterErrorAC(err.response.data.error));\r\n        })\r\n}\r\n\r\nexport const registrationAC = () => ({type: SET_REGISTER_SUCCESS} as const);\r\nexport const clearRegisterStatusAC = () => ({type: CLEAR_REGISTER_STATUS} as const);\r\nexport const setRegisterErrorAC = (error: string | null) => ({type: SET_REGISTER_ERROR, error} as const);\r\n\r\ntype RegistrationActionType = ReturnType<typeof registrationAC>;\r\ntype ClearRegisterStatusActionType = ReturnType<typeof clearRegisterStatusAC>;\r\ntype SetRegisterErrorActionType = ReturnType<typeof setRegisterErrorAC>;\r\n\r\nexport type RegisterReducerActionsType =\r\n    RegistrationActionType |\r\n    ClearRegisterStatusActionType |\r\n    SetRegisterErrorActionType","import {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {getAuthUserData, login} from \"../../../state/login-reducer\";\r\nimport {AppRootStateType} from \"../../../state/store\";\r\nimport {PROFILE_PATH} from \"../../../App\";\r\nimport {clearRegisterStatusAC} from \"../../../state/register-reducer\";\r\n\r\ninterface Values {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn: boolean = useSelector((state: AppRootStateType) => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAuthUserData())\r\n        dispatch(clearRegisterStatusAC());\r\n    },[])\r\n\r\n    const formikOnSubmit = (values: Values, {setSubmitting}: FormikHelpers<Values>) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe))\r\nreturn\r\n\r\n    }\r\n    if (isLoggedIn){\r\n        return <Redirect to={PROFILE_PATH}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <h1>Login</h1>\r\n                <Formik\r\n                initialValues={{\r\n                email: \"\",\r\n                password: \"\",\r\n                rememberMe: false\r\n            }}\r\n                onSubmit={formikOnSubmit}\r\n                >\r\n                <Form>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Field\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"email\"\r\n                type=\"email\"\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Field\r\n                id=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                type=\"password\"\r\n                />\r\n                <Field\r\n                id=\"rememberMe\"\r\n                name=\"rememberMe\"\r\n                type=\"checkbox\"\r\n                />\r\n\r\n                <button type=\"submit\">Submit</button>\r\n                </Form>\r\n                </Formik>\r\n            </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport s from './Register.module.css';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registerTC, setRegisterErrorAC} from \"../../../state/register-reducer\";\r\nimport {AppRootStateType} from \"../../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LOGIN_PATH} from \"../../../App\";\r\n\r\nexport const Register = () => {\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    const dispatch = useDispatch();\r\n    const isRegisterSuccess = useSelector<AppRootStateType, boolean>(state => state.register.isRegistrationSuccess)\r\n    const registerError = useSelector<AppRootStateType, null | string>(state => state.register.registerError)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        repeatPassword?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n\r\n            if (values.repeatPassword !== values.password) {\r\n                errors.repeatPassword = 'Passwords don\\'t match';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registerTC(values.email, values.password));\r\n        }\r\n    })\r\n\r\n    if (isRegisterSuccess) {\r\n        return <Redirect to={LOGIN_PATH}/>\r\n    }\r\n\r\n    const onFocusEmailInput = () => {\r\n        if (registerError) {\r\n            dispatch(setRegisterErrorAC(null));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.registerBlock}>\r\n            <h1>Register</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <span>Email: </span>\r\n                <div className={s.inputElement}>\r\n                    <input type=\"email\" {...formik.getFieldProps('email')} onFocus={onFocusEmailInput}/>\r\n                    {formik.touched.email && formik.errors.email ?\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                </div>\r\n                <span>Password: </span>\r\n                <div className={s.inputElement}>\r\n                    <input type=\"password\" {...formik.getFieldProps('password')}/>\r\n                    {formik.touched.password && formik.errors.password ?\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                </div>\r\n                <span>Repeat password: </span>\r\n                <div className={s.inputElement}>\r\n                    <input type=\"password\" {...formik.getFieldProps('repeatPassword')}/>\r\n                    {formik.touched.repeatPassword && formik.errors.repeatPassword ?\r\n                        <div style={{color: 'red'}}>{formik.errors.repeatPassword}</div> : null}\r\n                </div>\r\n                <div>\r\n                    <button type={\"submit\"}>Register</button>\r\n                </div>\r\n                <div style={{color: 'red'}}>\r\n                    {registerError}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {getAuthUserData, InitialStateLoginType, logout} from \"../../state/login-reducer\";\r\nimport {LOGIN_PATH} from \"../../App\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Profile = () => {\r\n    const loginState: InitialStateLoginType = useSelector((state: AppRootStateType) => state.login)\r\n    const [isLogged,setIsLogged] = useState<boolean>(loginState.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAuthUserData())\r\n    }, [])\r\n    const logOutHandler = () => {\r\n        dispatch(logout())\r\n        setIsLogged(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            {isLogged\r\n                ?\r\n                <div>\r\n                    <button onClick={logOutHandler}>LogOut</button>\r\n                    <div>name: {loginState.name}</div>\r\n                    <div>email: {loginState.email}</div>\r\n                    <div>publicCardPacksCount: {loginState.publicCardPacksCount}</div>\r\n                    <img src={loginState.avatar} alt=\"avatar\"/>\r\n                </div>\r\n                :\r\n                <NavLink to ={LOGIN_PATH}>Please, login</NavLink>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\nimport s from './Error404.module.css'\n\nfunction Error404() {\n    return (\n        <div className={s.errorBlock}>\n            <div className={s.number}>404</div>\n            <div className={s.message}>Page not found!</div>\n            <div className={s.cat}>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    );\n}\n\nexport default Error404;\n","import React from \"react\";\r\n\r\nexport const RestorePassword = () => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Restore Password</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const EnterPassword = () => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Enter Password</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ENTER_PASS_PATH, LOGIN_PATH, PROFILE_PATH, REGISTER_PATH, RESTORE_PASS_PATH, TEST_PAGE_PATH } from \"../../../App\";\r\nimport styles from './Main.module.css';\r\n\r\nexport const Main = () => {\r\n\r\n    return (\r\n        <div>\r\n            <NavLink className={styles.navBlock} to={LOGIN_PATH}>Login</NavLink>\r\n            <NavLink className={styles.navBlock} to={REGISTER_PATH}>Register</NavLink>\r\n            <NavLink className={styles.navBlock} to={PROFILE_PATH}>Profile</NavLink>\r\n            <NavLink className={styles.navBlock} to={RESTORE_PASS_PATH}>Restore Password</NavLink>\r\n            <NavLink className={styles.navBlock} to={ENTER_PASS_PATH}>Enter Password</NavLink>\r\n            <NavLink className={styles.navBlock} to={TEST_PAGE_PATH}>Test Page</NavLink>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}`; // fixed - need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\n        onChange && onChange(e);\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <div>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n                id={\"supercheckbox\"}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            <label htmlFor={\"supercheckbox\"}>\n                {children && <span className={s.spanClassName}>{children}</span>}\n            </label>\n        </div>\n    );\n}\n\nexport default SuperCheckbox;\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\nimport s from \"./SuperEditableSpan.module.css\";\nimport SuperInputText from \"../s1-SuperInputText/SuperInputText\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\n\n    const onEnterCallback = () => {\n        setEditMode(false); // выключить editMode при нажатии Enter\n\n        onEnter && onEnter();\n    };\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false); // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e);\n    };\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true); // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e);\n    };\n\n    const spanClassName = `${s.editableSpan} ${className}`;\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                        <img src={\"https://image.flaticon.com/icons/png/512/45/45706.png\"} width={\"20px\"}/>\n                    </span>\n\n                )\n            }\n        </>\n    );\n}\n\nexport default SuperEditableSpan;\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\nimport './SuperSelect.css';\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: JSX.Element[] | undefined = options?.map((opt, i) =>\n        <option key={i}>{opt}</option>\n    ); // map options with key - done\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e);\n        onChangeOption && onChangeOption(e.currentTarget.value);\n        // onChange, onChangeOption - done\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    );\n}\n\nexport default SuperSelect;\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport './SuperRadio.css';\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e);\n        onChangeOption && onChangeOption(e.currentTarget.value);\n        // onChange, onChangeOption - done\n    }\n\n    const mappedOptions: JSX.Element[] = options ? options.map((o, i) => (\n        <div className=\"form_radio\" key={name + \"-\" + i} >\n            <input\n                id={\"hw7-radio\" + i}\n                className={\"radio\"}\n                type={\"radio\"}\n                name={name}\n                checked={i === 0}\n                value={o}\n                onChange={onChangeCallback}\n                // name, checked, value, onChange - done\n            />\n            <label htmlFor={\"hw7-radio\" + i}>\n                <span></span>{o}\n            </label>\n        </div>\n    )) : [];\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    );\n}\n\nexport default SuperRadio;\n","import React from \"react\";\r\nimport SuperInputText from \"../../components/super-components/s1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../components/super-components/s2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../components/super-components/s3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperEditableSpan from \"../../components/super-components/s4-SuperEditableSpan/SuperEditableSpan\";\r\nimport SuperSelect from \"../../components/super-components/s5-SuperSelect/SuperSelect\";\r\nimport SuperRadio from \"../../components/super-components/s6-SuperRadio/SuperRadio\";\r\n\r\nexport const TestPage = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SuperInputText value={\"super input text\"}/>\r\n            </div>\r\n            <div>\r\n                <SuperButton>Super Button</SuperButton>\r\n            </div>\r\n            <div>\r\n                <SuperCheckbox/>\r\n            </div>\r\n            <div>\r\n                <SuperEditableSpan value={\"Super Editable Span\"}/>\r\n            </div>\r\n            <div>\r\n                <SuperSelect options={['value 1', 'value 2', 'value 3']}/>\r\n            </div>\r\n            <div>\r\n                <SuperRadio options={['value 1', 'value 2', 'value 3']}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"./n2-features/f1-auth/a1-login/Login\";\r\nimport {Register} from \"./n2-features/f1-auth/a2-register/Register\";\r\nimport {Profile} from \"./n2-features/f3-profile/Profile\";\r\nimport Error404 from \"./n2-features/f2-error404/Error404\";\r\nimport {RestorePassword} from \"./n2-features/f4-password/RestorePassword\";\r\nimport {EnterPassword} from \"./n2-features/f4-password/EnterPassword\";\r\nimport {Main} from \"./n1-main/m1-ui/Main/Main\";\r\nimport {TestPage} from \"./n2-features/f0-test/TestPage\";\r\n\r\nexport const LOGIN_PATH = \"/login\";\r\nexport const REGISTER_PATH = \"/register\";\r\nexport const PROFILE_PATH = \"/profile\";\r\nexport const RESTORE_PASS_PATH = \"/restore-pass\";\r\nexport const ENTER_PASS_PATH = \"/enter-pass\";\r\nexport const TEST_PAGE_PATH = \"/test\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Main/>\r\n            <div>\r\n                {/*<Header Nikolai's branch/>*/}\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={() => <Profile/>}/>\r\n                    <Route path={LOGIN_PATH} render={() => <Login/>}/>\r\n                    <Route path={REGISTER_PATH} render={() => <Register/>}/>\r\n                    <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n                    <Route path={RESTORE_PASS_PATH} render={() => <RestorePassword/>}/>\r\n                    <Route path={ENTER_PASS_PATH} render={() => <EnterPassword/>}/>\r\n                    <Route path={TEST_PAGE_PATH} render={() => <TestPage/>}/>\r\n                    <Route render={() => <Error404/>}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ProfileReducerActionsType = {\r\n    type: \"\"\r\n}","const initialState = {\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverReducer = (state: InitialStateType = initialState, action: RecoverReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type RecoverReducerActionsType = {\r\n    type: \"\"\r\n}","const initialState = {\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AppReducerActionsType = {\r\n    type: \"\"\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {loginReducer, LoginReducerActionsType} from \"./login-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {profileReducer, ProfileReducerActionsType} from \"./profile-reducer\";\r\nimport {registerReducer, RegisterReducerActionsType} from \"./register-reducer\";\r\nimport {recoverReducer, RecoverReducerActionsType} from \"./recover-reducer\";\r\nimport {appReducer, AppReducerActionsType} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    recover: recoverReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type ActionsType =\r\n    LoginReducerActionsType |\r\n    RegisterReducerActionsType |\r\n    RecoverReducerActionsType |\r\n    ProfileReducerActionsType |\r\n    AppReducerActionsType\r\n\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}